#include "ooo_cpu.h"
#include <iostream>

#define GLOBAL_HISTORY_LENGTH 14
#define GLOBAL_HISTORY_MASK ((1 << GLOBAL_HISTORY_LENGTH) - 1)
#define GS_HISTORY_TABLE_SIZE 16384
#define LOCAL_HISTORY_TABLE_SIZE 1024
#define LOCAL_PREDICTOR_SIZE 1024
#define CHOOSER_TABLE_SIZE 4096

using namespace std;

// Structures per CPU
int branch_history_vector[NUM_CPUS];
int gs_history_table[NUM_CPUS][GS_HISTORY_TABLE_SIZE];
uint16_t local_history_table[NUM_CPUS][LOCAL_HISTORY_TABLE_SIZE];
uint8_t local_predictor[NUM_CPUS][LOCAL_PREDICTOR_SIZE];
uint8_t chooser_table[NUM_CPUS][CHOOSER_TABLE_SIZE];

// Last prediction state
int last_global_pred[NUM_CPUS];
int last_local_pred[NUM_CPUS];
int last_choice[NUM_CPUS]; // 0 = GShare, 1 = Local

// Hash functions
unsigned int gs_table_hash(uint64_t ip, int bh_vector) {
    return (ip ^ (ip >> GLOBAL_HISTORY_LENGTH) ^ bh_vector) % GS_HISTORY_TABLE_SIZE;
}

unsigned int local_history_index(uint64_t ip) {
    return ip % LOCAL_HISTORY_TABLE_SIZE;
}

unsigned int local_predictor_index(uint16_t history) {
    return history % LOCAL_PREDICTOR_SIZE;
}

unsigned int chooser_index(uint64_t ip) {
    return ip % CHOOSER_TABLE_SIZE;
}

// Initialization
void O3_CPU::initialize_branch_predictor() {
    cout << "CPU " << cpu << " Tournament Predictor (GShare + Local)" << endl;

    branch_history_vector[cpu] = 0;

    for (int i = 0; i < GS_HISTORY_TABLE_SIZE; i++)
        gs_history_table[cpu][i] = 2;

    for (int i = 0; i < LOCAL_HISTORY_TABLE_SIZE; i++)
        local_history_table[cpu][i] = 0;

    for (int i = 0; i < LOCAL_PREDICTOR_SIZE; i++)
        local_predictor[cpu][i] = 2;

    for (int i = 0; i < CHOOSER_TABLE_SIZE; i++)
        chooser_table[cpu][i] = 1;
}

// Branch prediction
uint8_t O3_CPU::predict_branch(uint64_t ip) {
    unsigned int gs_index = gs_table_hash(ip, branch_history_vector[cpu]);
    unsigned int chooser_idx = chooser_index(ip);
    unsigned int local_idx = local_history_index(ip);
    uint16_t local_hist = local_history_table[cpu][local_idx];
    unsigned int local_pred_idx = local_predictor_index(local_hist);

    int global_counter = gs_history_table[cpu][gs_index];
    int local_counter = local_predictor[cpu][local_pred_idx];

    int global_prediction = (global_counter >= 2) ? 1 : 0;
    int local_prediction = (local_counter >= 2) ? 1 : 0;

    int use_local = (chooser_table[cpu][chooser_idx] >= 2);
    last_global_pred[cpu] = global_prediction;
    last_local_pred[cpu] = local_prediction;
    last_choice[cpu] = use_local;

    // Update history speculatively (safe, minimal ROB usage)
    branch_history_vector[cpu] <<= 1;
    branch_history_vector[cpu] &= GLOBAL_HISTORY_MASK;
    branch_history_vector[cpu] |= (use_local ? local_prediction : global_prediction);

    local_history_table[cpu][local_idx] <<= 1;
    local_history_table[cpu][local_idx] |= (use_local ? local_prediction : global_prediction);
    local_history_table[cpu][local_idx] &= (LOCAL_PREDICTOR_SIZE - 1);

    return use_local ? local_prediction : global_prediction;
}

// Update after actual outcome
void O3_CPU::last_branch_result(uint64_t ip, uint8_t taken) {
    unsigned int gs_index = gs_table_hash(ip, branch_history_vector[cpu]);
    unsigned int chooser_idx = chooser_index(ip);
    unsigned int local_idx = local_history_index(ip);
    uint16_t local_hist = local_history_table[cpu][local_idx];
    unsigned int local_pred_idx = local_predictor_index(local_hist);

    int global_pred = last_global_pred[cpu];
    int local_pred = last_local_pred[cpu];
    int used_local = last_choice[cpu];

    // GShare predictor update
    if (taken && gs_history_table[cpu][gs_index] < 3)
        gs_history_table[cpu][gs_index]++;
    else if (!taken && gs_history_table[cpu][gs_index] > 0)
        gs_history_table[cpu][gs_index]--;

    // Local predictor update
    if (taken && local_predictor[cpu][local_pred_idx] < 3)
        local_predictor[cpu][local_pred_idx]++;
    else if (!taken && local_predictor[cpu][local_pred_idx] > 0)
        local_predictor[cpu][local_pred_idx]--;

    // Chooser update logic
    if (global_pred != local_pred) {
        if (local_pred == taken && chooser_table[cpu][chooser_idx] < 3)
            chooser_table[cpu][chooser_idx]++;
        else if (global_pred == taken && chooser_table[cpu][chooser_idx] > 0)
            chooser_table[cpu][chooser_idx]--;
    } else if (global_pred == taken && local_pred == taken) {
        if (used_local && chooser_table[cpu][chooser_idx] < 3)
            chooser_table[cpu][chooser_idx]++;
        else if (!used_local && chooser_table[cpu][chooser_idx] > 0)
            chooser_table[cpu][chooser_idx]--;
    }
}


